using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using Capgemini.Inventory.BusinessLayer;
using Capgemini.Inventory.Entities;
using Capgemini.Inventory.DataAccessLayer;
using Capgemini.Inventory.Exceptions;
using Capgemini.Inventory.Helpers;

namespace Inventory.WPF
{
    /// <summary>
    /// Interaction logic for RemoveAddress.xaml
    /// </summary>
    public partial class RemoveAddress : Window
    {
        public RemoveAddress()
        {
            InitializeComponent();

        }

        private void TxtrID_TextChanged(object sender, TextChangedEventArgs e)
        {

        }

        private void BtnRefresh_Click(object sender, RoutedEventArgs e)
        {
            loaddata();
        }

        //load data to datagrid from collection
        private async void loaddata()
        {
            Supplier supplier = new Supplier();
            List<SupplierAddress> supAdList = new List<SupplierAddress>();
            try
            {
                using (SupplierAddressBL supAdBL = new SupplierAddressBL())
                {
                    supAdList = await supAdBL.GetSupplierAddressBySupplierIDBL(supplier.SupplierID);
                    if (supAdList.Count > 0)
                    {
                        dgvData.ItemsSource = supAdList;
                        lblStatus.Content = supAdList.Count.ToString();
                    }
                }
            }
            catch (Exception ex)
            {
                ExceptionLogger.LogException(ex);
                MessageBox.Show(ex.Message);
            }
        }

        //get values in textbox when datagrid selection changes
        private void dgvData_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            int rowindex = dgvData.SelectedIndex;
            if (rowindex < 0)
            {
                return;
            }
            txtrID.Text = getCellData(dgvData, rowindex, 0);
            txtradl1.Text = getCellData(dgvData, rowindex, 1);
            txtradl2.Text = getCellData(dgvData, rowindex, 2);
        }

        //to get cellData of one row
        private string getCellData(DataGrid dgv, int rowindex, int cellindex)
        {
            DataGridRow drow = dgv.ItemContainerGenerator.ContainerFromIndex(rowindex) as DataGridRow;
            var cellContent = dgv.Columns[cellindex].GetCellContent(drow) as TextBlock;
            return cellContent.Text;
        }

        private async void DtAdress_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                SupplierAddress supAd = new SupplierAddress();

                supAd.SupplierAddressID = Guid.Parse(txtrID.Text);

                using (SupplierAddressBL supAdBL = new SupplierAddressBL())
                {
                    bool SupplierAddressDeleted = await supAdBL.DeleteSupplierAddressBL(supAd.SupplierAddressID);
                    if (SupplierAddressDeleted)
                    {
                        MessageBox.Show($"Supplier address {supAd.SupplierAddressID} deleted");
                        loaddata();
                    }
                }
            }
            catch (Exception ex)
            {
                ExceptionLogger.LogException(ex);
                MessageBox.Show(ex.Message);
            }

        }
    }
}
